package com.topwellsoft.jnhouse_android.realtime_order;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.view.MotionEvent;
import android.view.View;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.location.Poi;
import com.baidu.mapapi.map.MapView;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.topwellsoft.androidutils.PreferencesUtils;
import com.topwellsoft.network.NetworkUtils;
import com.topwellsoft.network.TpAjaxCallback;


import net.tsz.afinal.FinalHttp;
import net.tsz.afinal.http.AjaxCallBack;
import net.tsz.afinal.http.AjaxParams;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;
import jnhouse.topwellsoft.com.jnhouse_android.R;
import jnhouse.topwellsoft.com.jnhouse_android.model.LoginEntity;
import jnhouse.topwellsoft.com.jnhouse_android.ui.MainTabsActivity;
import jnhouse.topwellsoft.com.jnhouse_android.ui.question.MyDiaLog;

import jnhouse.topwellsoft.com.jnhouse_android.util.ToastUtil;

/**
 * Created by Administrator on 2016/8/8.
 */
public class ByHouseActivity extends Activity implements View.OnClickListener {
    @Bind(R.id.mMapView)
    MapView mapView;
    @Bind(R.id.layout_order)
    LinearLayout linearlayout_map;
    @Bind(R.id.layout_btn)
    LinearLayout layout_btn;
    /////
    @Bind(R.id.select_two)
    ImageView select_two;
    /////
    @Bind(R.id.question_img_back)
    ImageView img_back;
    @Bind(R.id.tv_middle)
    TextView tv_title;
    /////
    @Bind(R.id.select_used)
    TextView select_used;
    @Bind(R.id.select_new)
    TextView select_new;
    @Bind(R.id.select_rent)
    TextView select_rent;
    @Bind(R.id.demand)
    EditText demand;
    @Bind(R.id.location)
    TextView tv_location;

    @Bind(R.id.btn_order)
    Button btn_order;
    /////
    @Bind(R.id.tv_order)
    TextView tv_order;
    /////
    @Bind(R.id.btn_see1)
    Button btn_see1;
    @Bind(R.id.btn_see2)
    Button btn_see2;
    @Bind(R.id.btn_by_people)
    Button btn_by_people;
    @Bind(R.id.btn_by_house)
    Button btn_by_house;
    @Bind(R.id.btn_by_store)
    Button btn_by_store;
    private MyDiaLog diaLog;
    private TextView tv[] = new TextView[3];
    private float downX, downY;
    private float width, height;
    private float moveX, moveY;
    private float px, py;
    private int house_type = 1;
    public LocationClient mLocationClient = null;
    public BDLocationListener myListener = new MyLocationListener();
    private double latitude, longitude;
    private String order_lat, order_lng;
    private ChoseTimeDialog timeDialog;
    public static int SEARCH_LOCATION = 1000;
    private static boolean hastime = false;
    public static TextView see_time;
    public static Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            if (msg.arg1 == 1234) {
                if (msg.arg2 == 10) {
                    see_time.setText("随时看房");
                } else {
                    see_time.setText(ChoseTimeDialog.result_date[msg.arg2] + ChoseTimeDialog.time);
                }
                hastime = true;
            }
        }
    };

    @Nullable
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_by_house);
        ButterKnife.bind(this);
        mLocationClient = new LocationClient(this);     //声明LocationClient类
        initLocation();
        mLocationClient.registerLocationListener(myListener);    //注册监听函数
        mLocationClient.start();
        initEvent();
        init();
        initTimeDialog();
        initDiaog();
    }

    public void initDiaog() {
        diaLog = new MyDiaLog(ByHouseActivity.this);
        diaLog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        diaLog.setCancelable(true);
    }

    public void initTimeDialog() {
        timeDialog = new ChoseTimeDialog(ByHouseActivity.this);
        timeDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        timeDialog.setCancelable(true);
        timeDialog.setListener(new ChoseTimeDialog.ButtonListener() {
            @Override
            public void SureListener() {
                Message message = new Message();
                message.arg1 = 1234;
                message.arg2 = timeDialog.pos;
                ByHouseActivity.handler.sendMessage(message);
                timeDialog.dismiss();
            }
        });
    }

    public void init() {
        linearlayout_map.setVisibility(View.GONE);
        tv_title.setText("以房找人");
        tv[0] = select_used;
        tv[1] = select_new;
        tv[2] = select_rent;
        width = getWindow().getWindowManager().getDefaultDisplay().getWidth();
        height = getWindow().getWindowManager().getDefaultDisplay().getHeight();
        setTextState(0);
        select_two.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                        downX = event.getRawX();
                        downY = event.getRawY();
                        break;
                    case MotionEvent.ACTION_MOVE:
                        moveX = event.getRawX();
                        moveY = event.getRawY();
                        px = select_two.getX() + (moveX - downX);
                        py = select_two.getY() + (moveY - downY);
                        if (px > width - select_two.getWidth()) {
                            px = width - select_two.getWidth();
                        }
                        if (px < 0) {
                            px = 0;
                        }
                        if (py > height) {
                            py = height;
                        }
                        if (py < getStatusBarHeight()) {
                            py = getStatusBarHeight();
                        }
                        select_two.setX(px);
                        select_two.setY(py);
                        downX = moveX;
                        downY = moveY;
                        break;
                    case MotionEvent.ACTION_UP:
                        MainTabsActivity.sx = px;
                        MainTabsActivity.sy = py;
                        break;
                    default:
                        break;
                }
                return false;
            }
        });
    }

    public int getStatusBarHeight() {
        int result = 0;
        int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
        if (resourceId > 0) {
            result = getResources().getDimensionPixelSize(resourceId);
        }
        return result;
    }

    public void initEvent() {
        see_time = (TextView) this.findViewById(R.id.see_time);
        select_used.setOnClickListener(this);
        select_new.setOnClickListener(this);
        select_rent.setOnClickListener(this);
        btn_see1.setOnClickListener(this);
        btn_see2.setOnClickListener(this);
        btn_by_people.setOnClickListener(this);
        btn_by_house.setOnClickListener(this);
        btn_by_store.setOnClickListener(this);
        btn_order.setOnClickListener(this);
        tv_order.setOnClickListener(this);
        tv_location.setOnClickListener(this);
        see_time.setOnClickListener(this);
        select_two.setOnClickListener(this);
        img_back.setOnClickListener(this);
    }

    public void setTextState(int position) {
        for (int i = 0; i < 3; i++) {
            tv[i].setBackgroundResource(R.drawable.layout_agent_background);
            tv[i].setTextColor(Color.parseColor("#9e9e9e"));
        }
        tv[position].setBackgroundResource(R.drawable.layout_pressed);
        tv[position].setTextColor(Color.parseColor("#ff0000"));
    }

    @Override
    public void onClick(View v) {
        Intent intent = null;
        switch (v.getId()) {
            case R.id.select_used://二手房
                setTextState(0);
                break;
            case R.id.select_new://新房
                setTextState(1);
                break;
            case R.id.select_rent://租房
                setTextState(2);
                break;
            case R.id.btn_see1://看房日程
                break;
            case R.id.btn_see2://看房记录
                break;
            case R.id.btn_by_people://以人找房
                break;
            case R.id.btn_by_house://以房找人
                break;
            case R.id.btn_by_store://以门店找房
                break;
            case R.id.tv_order://控制预约是否显示
                if (linearlayout_map.isShown()) {
                    linearlayout_map.setVisibility(View.GONE);
                } else {
                    linearlayout_map.setVisibility(View.VISIBLE);
                }
                break;
            case R.id.location://位置
                intent = new Intent(ByHouseActivity.this, SearchLoactionActivity.class);
                intent.putExtra("lati", latitude);
                intent.putExtra("longi", longitude);
                startActivityForResult(intent, SEARCH_LOCATION);
                break;
            case R.id.see_time://选择时间
                timeDialog.show();
                break;
            case R.id.select_two://浮动按钮
                if (layout_btn.isShown()) {
                    layout_btn.setVisibility(View.GONE);
                } else {
                    layout_btn.setVisibility(View.VISIBLE);
                }
                break;
            case R.id.question_img_back://返回
                finish();
                break;
            case R.id.btn_order:
                if (hastime) {
                    order();
                    //    ddddddd


                } else {
                    ToastUtil.makeText(ByHouseActivity.this, "请选择时间", ToastUtil.LENGTH_SHORT).setAnimation(R.style.PopToast).show();
                }
                break;
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK) {
            switch (requestCode) {
                case 1000:
                    tv_location.setText(data.getStringExtra("addr"));
                    order_lat = data.getStringExtra("lati");
                    order_lng = data.getStringExtra("longi");
                    break;
            }
        }
    }

    private void initLocation() {
        LocationClientOption option = new LocationClientOption();
        option.setLocationMode(LocationClientOption.LocationMode.Hight_Accuracy
        );//可选，默认高精度，设置定位模式，高精度，低功耗，仅设备
        option.setCoorType("bd09ll");//可选，默认gcj02，设置返回的定位结果坐标系
        option.setScanSpan(0);//可选，默认0，即仅定位一次，设置发起定位请求的间隔需要大于等于1000ms才是有效的
        option.setIsNeedAddress(true);//可选，设置是否需要地址信息，默认不需要
        option.setOpenGps(true);//可选，默认false,设置是否使用gps
        option.setLocationNotify(false);//可选，默认false，设置是否当gps有效时按照1S1次频率输出GPS结果
        option.setIsNeedLocationDescribe(true);//可选，默认false，设置是否需要位置语义化结果，可以在BDLocation.getLocationDescribe里得到，结果类似于“在北京天安门附近”
        option.setIsNeedLocationPoiList(true);//可选，默认false，设置是否需要POI结果，可以在BDLocation.getPoiList里得到
        option.setIgnoreKillProcess(false);//可选，默认true，定位SDK内部是一个SERVICE，并放到了独立进程，设置是否在stop的时候杀死这个进程，默认不杀死
        option.SetIgnoreCacheException(false);//可选，默认false，设置是否收集CRASH信息，默认收集
        option.setEnableSimulateGps(false);//可选，默认false，设置是否需要过滤gps仿真结果，默认需要
        mLocationClient.setLocOption(option);
    }

    class MyLocationListener implements BDLocationListener {

        @Override
        public void onReceiveLocation(BDLocation location) {
            //Receive Location
            StringBuffer sb = new StringBuffer(256);
            sb.append("time : ");
            sb.append(location.getTime());
            sb.append("\nerror code : ");
            sb.append(location.getLocType());
            sb.append("\nlatitude : ");
            sb.append(location.getLatitude());
            sb.append("\nlontitude : ");
            sb.append(location.getLongitude());
            sb.append("\nradius : ");
            sb.append(location.getRadius());
            if (location.getLocType() == BDLocation.TypeGpsLocation) {// GPS定位结果
                sb.append("\nspeed : ");
                sb.append(location.getSpeed());// 单位：公里每小时
                sb.append("\nsatellite : ");
                sb.append(location.getSatelliteNumber());
                sb.append("\nheight : ");
                sb.append(location.getAltitude());// 单位：米
                sb.append("\ndirection : ");
                sb.append(location.getDirection());// 单位度
                sb.append("\naddr : ");
                sb.append(location.getAddrStr());
                sb.append("\ndescribe : ");
                sb.append("gps定位成功");
                latitude = location.getLatitude();
                longitude = location.getLongitude();
                tv_location.setText(location.getAddress().city + "·" + location.getAddress().district);


            } else if (location.getLocType() == BDLocation.TypeNetWorkLocation) {// 网络定位结果
                sb.append("\naddr : ");
                sb.append(location.getAddrStr());
                //运营商信息
                sb.append("\noperationers : ");
                sb.append(location.getOperators());
                sb.append("\ndescribe : ");
                sb.append("网络定位成功");
                latitude = location.getLatitude();
                longitude = location.getLongitude();
                tv_location.setText(location.getAddress().city + "·" + location.getAddress().district);
            } else if (location.getLocType() == BDLocation.TypeOffLineLocation) {// 离线定位结果
                sb.append("\ndescribe : ");
                sb.append("离线定位成功，离线定位结果也是有效的");
            } else if (location.getLocType() == BDLocation.TypeServerError) {
                sb.append("\ndescribe : ");
                sb.append("服务端网络定位失败，可以反馈IMEI号和大体定位时间到loc-bugs@baidu.com，会有人追查原因");
            } else if (location.getLocType() == BDLocation.TypeNetWorkException) {
                sb.append("\ndescribe : ");
                sb.append("网络不同导致定位失败，请检查网络是否通畅");
            } else if (location.getLocType() == BDLocation.TypeCriteriaException) {
                sb.append("\ndescribe : ");
                sb.append("无法获取有效定位依据导致定位失败，一般是由于手机的原因，处于飞行模式下一般会造成这种结果，可以试着重启手机");
            }
            sb.append("\nlocationdescribe : ");
            sb.append(location.getLocationDescribe());// 位置语义化信息

            List<Poi> list = location.getPoiList();// POI数据
            if (list != null) {
                sb.append("\npoilist size = : ");
                sb.append(list.size());
                for (Poi p : list) {
                    sb.append("\npoi= : ");
                    sb.append(p.getId() + " " + p.getName() + " " + p.getRank());
                }
            }

        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        mapView.onDestroy();
    }

    @Override
    protected void onResume() {
        super.onResume();
        mapView.onResume();
    }

    @Override
    protected void onPause() {
        super.onPause();
        mapView.onPause();
    }

    private void order() {


        AjaxParams params = new AjaxParams();
        LoginEntity loginEntity = (LoginEntity) PreferencesUtils.getObject(ByHouseActivity.this, "loginEntity");

        params.put("lng", longitude + "");
        params.put("lat", latitude + "");
        params.put("user_id", loginEntity.getUser_id());
        params.put("user_phone", loginEntity.getUsername());
        params.put("user_name", loginEntity.getRealname());
        params.put("order_title", tv_location.getText().toString());
        params.put("order_lng", order_lng);
        params.put("order_lat", order_lat);
        params.put("house_type", house_type + "");
        params.put("visit_time", see_time.getText().toString());
        params.put("show_condition", demand.getText().toString());
        params.put("userUUID", loginEntity.getUserUUID());

        NetworkUtils.asyncPost(RealtimeOrderServerAPI.customerOrderMarker,params, new TpAjaxCallback() {
            @Override
            public void onSuccess(JSONObject jsonObject) {

                try {

                    Gson gson = new Gson();
                    ByHouseEntity byHouseEntity = gson.fromJson(jsonObject.toString(), new TypeToken<ByHouseEntity>() {
                    }.getType());
                    if (byHouseEntity.getCode() == 0) {
                        switch (byHouseEntity.getResult()) {
                            case 1:
                                ToastUtil.makeText(ByHouseActivity.this, "订单发出失败", ToastUtil.LENGTH_SHORT).setAnimation(R.style.PopToast).show();
                                break;
                            case 0:
                                ToastUtil.makeText(ByHouseActivity.this, "订单已发出", ToastUtil.LENGTH_SHORT).setAnimation(R.style.PopToast).show();
                                new Handler().postDelayed(new Runnable() {
                                    @Override
                                    public void run() {
                                        finish();
                                    }
                                }, 2000);
                                break;
                            case 2:
                                ToastUtil.makeText(ByHouseActivity.this, "未提供位置信息", ToastUtil.LENGTH_SHORT).setAnimation(R.style.PopToast).show();
                                break;
                        }
                    } else {
                        ToastUtil.makeText(ByHouseActivity.this, "预约失败", ToastUtil.LENGTH_SHORT).setAnimation(R.style.PopToast).show();
                    }
                    if (diaLog.isShowing()) diaLog.dismiss();
                } catch ( Exception e) {
                    e.printStackTrace();
                }
            }


        });


    }
}
