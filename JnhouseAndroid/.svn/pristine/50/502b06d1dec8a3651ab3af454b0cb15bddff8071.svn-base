package jnhouse.topwellsoft.com.jnhouse_android.ui.mine;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.Layout;
import android.text.Spannable;
import android.text.SpannableStringBuilder;
import android.text.style.AbsoluteSizeSpan;
import android.text.style.AlignmentSpan;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.topwellsoft.androidutils.PreferencesUtils;

import net.tsz.afinal.FinalHttp;
import net.tsz.afinal.http.AjaxCallBack;
import net.tsz.afinal.http.AjaxParams;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.json.JSONException;
import org.json.JSONObject;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import jnhouse.topwellsoft.com.jnhouse_android.R;
import jnhouse.topwellsoft.com.jnhouse_android.constant.JnHouse_Record;
import jnhouse.topwellsoft.com.jnhouse_android.model.InformationResult;
import jnhouse.topwellsoft.com.jnhouse_android.model.LoginEntity;
import jnhouse.topwellsoft.com.jnhouse_android.ui.MainTabsActivity;
import jnhouse.topwellsoft.com.jnhouse_android.ui.circleimageview.CircleImageView;
import jnhouse.topwellsoft.com.jnhouse_android.ui.login.TpGetPassword;
import jnhouse.topwellsoft.com.jnhouse_android.ui.release.Release;
import jnhouse.topwellsoft.com.jnhouse_android.util.Application.Configs;
import jnhouse.topwellsoft.com.jnhouse_android.util.CustomProgressDialog;
import jnhouse.topwellsoft.com.jnhouse_android.util.EventUtil;
import jnhouse.topwellsoft.com.jnhouse_android.util.FinalBitmapUtil;
import jnhouse.topwellsoft.com.jnhouse_android.util.ModifyAvatarDialog;
import jnhouse.topwellsoft.com.jnhouse_android.util.PersonInfo;
import jnhouse.topwellsoft.com.jnhouse_android.util.Tools;

import static jnhouse.topwellsoft.com.jnhouse_android.R.id.information_headportrait_layout;

public class Information extends AppCompatActivity {
    private RelativeLayout mRelativeLayout_headportrait,mRelativeLayout_nickname,mRelativeLayout_change_password;
    private RelativeLayout mRelativeLayout_phone;
    private Button mButton_back,mButton_confirm;
    private TextView mTextView_nick,mTextView_phone;
    private ImageView mImageView_headportrait;
    private static final int CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE = 100;
    private static final int PICK_IMAGE_ACTIVITY_REQUEST_CODE = 200;
    private static final String tag = "information";

    private String code;

    private File updateDir = null;
    private CustomProgressDialog progressDialog;
    private Bitmap bmp;
    private String picName;
    private Intent data;
    private CircleImageView imageView;
    private PersonInfo info;
    private LoginEntity userInfo;
    private static final String IMAGE_FILE_NAME = "faceImage.jpg";

    private String AParams;
    private String content;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_information);
        imageView = (CircleImageView) findViewById(R.id.information_headportrait_iv);
        mRelativeLayout_headportrait = (RelativeLayout) findViewById(R.id.information_headportrait_layout);
        mRelativeLayout_nickname = (RelativeLayout) findViewById(R.id.information_nickname_layout);
        mRelativeLayout_phone = (RelativeLayout) findViewById(R.id.information_phone_layout);
        mRelativeLayout_change_password = (RelativeLayout) findViewById(R.id.information_change_password_layout);
        mButton_back = (Button) findViewById(R.id.back_button);
        mTextView_nick = (TextView) findViewById(R.id.information_nickname_tv);
        mTextView_phone = (TextView) findViewById(R.id.information_phone_tv);
        mTextView_phone.setText(new LoginEntity().getUsername());

        mButton_back.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                onBackPressed();
                /*Intent intent = new Intent();
                intent.setClass(Information.this,MainTabsActivity.class);
                intent.putExtra("mine",3);
                startActivity(intent);*/
            }
        });
//        getNickname();
        getPhoneNumber();
        mRelativeLayout_headportrait.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showDialog();
            }
        });
        final Intent intent = new Intent();
        mRelativeLayout_nickname.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                intent.setClass(Information.this,Nickname.class);
                intent.putExtra("REQUEST", "3");
                intent.putExtra("CONTENT", mTextView_nick.getText().toString());
                intent.putExtra("AParams", "realname");
                startActivity(intent);
//                startActivityForResult(intent, Configs.RESULT_REQUEST_CODE_03);
            }
        });

        mRelativeLayout_change_password.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                intent.setClass(Information.this,TpGetPassword.class);
//                intent.setClass(Information.this,ChangePassword.class);
                startActivity(intent);
            }
        });

        EventBus.getDefault().register(this);
//        EventBus.getDefault().post(new EventUtil(mTextView_nick.getText().toString()));

        try {
            initDate();
        } catch (IOException e) {
            e.printStackTrace();
        }
        setImageBitmap(imageView);
    }

    public void setImageBitmap(ImageView imageView) {

        String myJpgPath = Environment.getExternalStorageDirectory()
                + Configs.saveHeadName;
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inSampleSize = 2;
        Bitmap bm = BitmapFactory.decodeFile(myJpgPath, options);
        if (bm != null) {
            imageView.setImageBitmap(bm);
        } else {
            imageView.setBackgroundResource(R.drawable.ic_launcher);
        }
    }

    public void initDate() throws IOException {

//        info = (PersonInfo) PreferencesUtils.getObject(this, "PersonInfo");
        userInfo = (LoginEntity) PreferencesUtils.getObject(this, "loginEntity");
        if (!"".equals(userInfo.getRealname())){
            mTextView_nick.setText(userInfo.getRealname());
        }else {
            mTextView_nick.setText("");
        }
        /*Intent intent = getIntent();
        code = intent.getStringExtra("REQUEST");
        AParams = intent.getStringExtra("AParams");
        content = intent.getStringExtra("CONTENT");
        mTextView_nick.setText(content);*/
        /*if (info != null) {

            if(info.getPhotoUrl() != null && !info.getPhotoUrl().equals("")){
//            if(info.getAvatar() != null && !info.getAvatar().equals("")){
                FinalBitmapUtil.finalBitmap(this, imageView, info.getPhotoUrl());
            }else{
//				imageView.setBackgroundResource(R.drawable.wutouxiang);
            }
        }*/
    }

    @Subscribe
    public void onEventMainThread(EventUtil eventUtil){
        String msg=eventUtil.getMsg();
        mTextView_nick.setText(msg);
    }


    private void getPhoneNumber() {
        LoginEntity loginEntity = (LoginEntity) PreferencesUtils.getObject(this,"loginEntity");
        String username = loginEntity.getUsername();
        mTextView_phone.setText(username);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        EventBus.getDefault().unregister(this);
    }

    public void showDialog() {

        ModifyAvatarDialog modifyAvatarDialog = new ModifyAvatarDialog(this) {
            // 选择本地相册
            @Override
            public void doGoToImg() {
                this.dismiss();
                Intent intentFromGallery = new Intent();
                intentFromGallery.setType("image/*"); // 设置文件类型
                intentFromGallery.setAction(Intent.ACTION_GET_CONTENT);
                startActivityForResult(intentFromGallery,
                        Configs.IMAGE_REQUEST_CODE);
            }

            // 选择相机拍照
            @Override
            public void doGoToPhone() {
                this.dismiss();
                Intent intentFromCapture = new Intent(
                        MediaStore.ACTION_IMAGE_CAPTURE);
                // 判断存储卡是否可以用，可用进行存储
                if (Tools.hasSdcard()) {
                    intentFromCapture.putExtra(MediaStore.EXTRA_OUTPUT, Uri
                            .fromFile(new File(Environment
                                    .getExternalStorageDirectory(),
                                    IMAGE_FILE_NAME)));
                }
                startActivityForResult(intentFromCapture,
                        Configs.CAMERA_REQUEST_CODE);
            }
        };
        AlignmentSpan span = new AlignmentSpan.Standard(
                Layout.Alignment.ALIGN_CENTER);
        AbsoluteSizeSpan span_size = new AbsoluteSizeSpan(25, true);
        SpannableStringBuilder spannable = new SpannableStringBuilder();
        String dTitle = getString(R.string.gl_choose_title);
        spannable.append(dTitle);
        spannable.setSpan(span, 0, dTitle.length(),
                Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        spannable.setSpan(span_size, 0, dTitle.length(),
                Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        modifyAvatarDialog.setTitle(spannable);
        modifyAvatarDialog.show();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        // 结果码不等于取消时候
        if (resultCode != RESULT_CANCELED) {

            switch (requestCode) {

                case Configs.IMAGE_REQUEST_CODE:

                    startPhotoZoom(data.getData());
                    break;

                case Configs.CAMERA_REQUEST_CODE:

                    if (Tools.hasSdcard()) {
                        File tempFile = new File(
                                Environment.getExternalStorageDirectory() + "/"
                                        + IMAGE_FILE_NAME);
                        startPhotoZoom(Uri.fromFile(tempFile));
                    } else {
                        Toast.makeText(this, "未找到存储卡，无法存储照片！", Toast.LENGTH_LONG)
                                .show();
                    }
                    break;

                case Configs.RESULT_REQUEST_CODE:
                    if (data != null) {
                        getImageToView(data);
                    }
                    break;
                case Configs.RESULT_REQUEST_CODE_03:
//                    userInfo = (LoginEntity) PreferencesUtils.getObject(this,"loginEntity");
                    mTextView_nick.setText(data.getExtras().getString("RESULT_REQUEST"));
//                    userInfo.setRealname(data.getExtras().getString("RESULT_REQUEST"));
//                    PreferencesUtils.putObject(this, "PersonInfo", info);
                    PreferencesUtils.putObject(this, "loginEntity", info);
                    Log.i("#####","添加到数据库工具类");
                    break;
            }
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    /**
     * 裁剪图片方法实现
     *
     * @param uri
     */
    public void startPhotoZoom(Uri uri) {

        Intent intent = new Intent("com.android.camera.action.CROP");
        intent.setDataAndType(uri, "image/*");
        // 设置裁剪
        intent.putExtra("crop", "true");
        // aspectX aspectY 是宽高的比例
        intent.putExtra("aspectX", 1);
        intent.putExtra("aspectY", 1);
        // outputX outputY 是裁剪图片宽高
        intent.putExtra("outputX", 320);
        intent.putExtra("outputY", 320);
        intent.putExtra("return-data", true);
        startActivityForResult(intent, Configs.RESULT_REQUEST_CODE);
    }

    /**
     * 保存裁剪之后的图片数据
     *
     *
     */
    private void getImageToView(Intent data) {
        Bundle extras = data.getExtras();
        if (extras != null) {
            Bitmap photo = extras.getParcelable("data");
            saveToLocal(photo);
        }
    }

    /**
     * 保存图片到指定目录
     *
     * @param bm
     */
    public void saveToLocal(Bitmap bm) {

        String path = Environment.getExternalStorageDirectory()
                + Configs.saveHeadName;
        updateDir = new File(Environment.getExternalStorageDirectory(),
                Configs.saveHeadPath);
        if (!updateDir.exists()) {
            updateDir.mkdirs();
        }
        try {
            FileOutputStream fos = new FileOutputStream(path);
            bm.compress(Bitmap.CompressFormat.JPEG, 75, fos);
            fos.flush();
            fos.close();
            getPDAServerData(path,bm);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void getPDAServerData(String imageFilePath, final Bitmap bm) {

        progressDialog = new CustomProgressDialog(this, "正在上传...");
        progressDialog.show();
        progressDialog.setCanceledOnTouchOutside(false);
        try {
            final LoginEntity user_info = (LoginEntity) PreferencesUtils.getObject(Information.this, "loginEntity");
            AjaxParams params = new AjaxParams();
            params.put("user_id", user_info.getUser_id());
            params.put("avatar", new File(imageFilePath));
            params.put("userUUID", user_info.getUserUUID());
            Log.i("####","picFileFullName" + new File(imageFilePath));
            FinalHttp fh = new FinalHttp();
            fh.post(JnHouse_Record.Key_user_avatar, params,
                    new AjaxCallBack<Object>() {

                        @Override
                        public void onFailure(Throwable t, int errorNo,String strMsg) {

                            progressDialog.dismiss();
                            Log.i("####","onFailure");
                            Toast.makeText(Information.this, "头像上传失败", Toast.LENGTH_SHORT).show();
                        }

                        @Override
                        public void onLoading(long count, long current) {
                            super.onLoading(count, current);
                        }

                        @Override
                        public void onSuccess(Object t) {

                            try {
                                JSONObject jsonObject = new JSONObject(t.toString());
                                Gson gson = new Gson();
                                InformationResult result = null;
                                result = gson.fromJson(
                                        t.toString(),new TypeToken<InformationResult>() {}.getType());

                                if (result != null) {

                                    switch(result.getCode()){

                                        case 0:
                                            progressDialog.dismiss();
                                            Log.i("####","case 0");
                                            Drawable drawable = new BitmapDrawable(bm);
                                            imageView.setImageDrawable(drawable);
                                            Toast.makeText(Information.this,"上传成功",Toast.LENGTH_SHORT).show();
                                            break;

                                        case -1:
                                            Log.i("####","case -1");
                                            Toast.makeText(Information.this, "上传失败", Toast.LENGTH_SHORT).show();
                                            break;

                                        case 1:
                                            Log.i("####","case 1");
                                            Toast.makeText(Information.this, "未登录", Toast.LENGTH_SHORT).show();
                                            break;
                                        default:
                                            Toast.makeText(Information.this,"default",Toast.LENGTH_SHORT).show();

                                    }

                                } else {
                                    Log.i("####","result" + result);
                                    Toast.makeText(Information.this, "上传失败", Toast.LENGTH_SHORT).show();
                                }

                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        }

                    });

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


}
